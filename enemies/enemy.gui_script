--url: "level_1:/enemy/enemy#enemy"
local gd = require "main.game_data"
local gf = require "main.game_functions"
-- NEED TO SET ENEMY PER LEVEL (generic way?)

function init(self)
	msg.post(".", "acquire_input_focus")

	self.enemy = nil
	self.move_positions = {vmath.vector3(100, 450, 0), vmath.vector3(322, 450, 0), vmath.vector3(540, 450, 0)}
	self.move_options = nil

	msg.post("main:/mandatory#main", "enemy init done") --feels like there should be a way to do this via Monarch
	print(msg.url())
	print("enemy gui init done")
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("setup") then
		self.enemy = gd.enemies[message["level"]]
		self.health = self.enemy.health
		self.move_options = gf.generate_enemy_move_nodes(self.enemy, self.move_positions)
		--pprint(self.enemy)
	end
	if message_id == hash("select move") then
		local player_move = message.player_move
		local enemy_move_node = gf.select_move(self.move_options)
		local enemy_move = enemy_move_node["move_type"]
		print("Enemy selected: " .. enemy_move)

		local outcome = gf.determine_outcome(player_move, enemy_move)

		msg.post(sender, "outcome", {outcome.player_result})
		print("Enemy outcome: " .. outcome.enemy_result)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
