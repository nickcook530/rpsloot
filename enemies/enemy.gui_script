--url: "level_1:/enemy/enemy#enemy"
local gd = require "game.game_data"
local gf = require "game.game_functions"
-- NEED TO SET ENEMY PER LEVEL (generic way?)

function init(self)
	msg.post(".", "acquire_input_focus")

	self.enemy = nil --left blank because game gui decides the level
	self.effect_table = {}
	self.hand_positions = {vmath.vector3(105, 810, 0), vmath.vector3(320, 810, 0), vmath.vector3(535, 810, 0)}
	self.hand = nil --left blank because game gui decides the level
	
	print("enemy gui init done")
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
	print("ENEMY gui script final function done")
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("setup") then
		self.enemy = gd.enemies[message["level"]] --set enemy based on the level

		self.deck = gf.generate_deck(self.enemy)
		
		self.health = self.enemy.health
		gui.set_text(gui.get_node("enemy_health"), "Enemy hp: "..self.health)
		
		self.hand = gf.initial_hand("enemy", self.deck, self.hand_positions)
		msg.post("/game/game#game", "enemy_setup_done")
	end

	--prompt enemy to select a card
	if message_id == hash("select_card") then

		local random_num = math.random(#self.hand)
		
		self.enemy_node_tree_selected = self.hand[random_num]
		local enemy_node_selected = self.enemy_node_tree_selected[hash("enemy_card")]

		gui.animate(enemy_node_selected, "position", vmath.vector3(320, 560, 0), gui.EASING_LINEAR, 1)

		--Using self.hand[2] to check because table.remove causes table entries to shift
		--At the time of this call the hand still believes it has the previous node (remove last to avoid shift)
		if next(self.deck) ~= nil and self.hand[2] ~= nil then
			local empty_hand_position = self.hand_positions[random_num]
			local new_deck_and_card = gf.draw_card(self.deck)
			local new_card = new_deck_and_card.card
			self.deck = new_deck_and_card.deck
			self.hand[random_num] = gf.make_enemy_hand_node(new_card, empty_hand_position)
		elseif next(self.deck) == nil and self.hand[2] == nil then
			self.deck = gf.generate_deck(self.enemy)
			self.hand = gf.initial_hand("enemy", self.deck, self.hand_positions)
		else
			table.remove(self.hand, random_num)
		end

		--pass details about selected card to game gui logic
		local card_selected = self.enemy_node_tree_selected.card_details
		msg.post("/game/game#game", "enemy_choice", {card = card_selected})
		print("Enemy selected: " .. card_selected.type)
		
	end

	if message_id == hash("outcome_actions") then
		self.previous_node_selected = self.enemy_node_tree_selected[hash("enemy_card")] --set last node to be deleted manually
		
		self.health = self.health + message.health_change

		--take action on effects currently on character
		local effect_outcome = gf.trigger_effects(self.health, self.effect_table)
		self.health = effect_outcome.health
		self.effect_table = effect_outcome.effect_table

		--update effect table with new effects
		self.effect_table = gf.add_new_effects(message.effect_change, self.effect_table)
		
		gui.set_text(gui.get_node("enemy_health"), "Enemy hp: "..self.health)
		print("ENEMY hp: " ..self.health)
		
		if self.health <= 0 then
			msg.post("/game/game#game", "enemy_health_0")
		end
	end

	if message_id == hash("delete_previous_node") then
		gui.delete_node(self.previous_node_selected)
		self.previous_node_selected = nil
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
