--url: "level_1:/enemy/enemy#enemy"
local gd = require "main.game_data"
local gf = require "main.game_functions"
-- NEED TO SET ENEMY PER LEVEL (generic way?)

function init(self)
	msg.post(".", "acquire_input_focus")

	self.enemy = nil
	self.move_positions = {vmath.vector3(100, 860, 0), vmath.vector3(322, 860, 0), vmath.vector3(540, 860, 0)}
	self.move_options = nil
	
	msg.post("main:/mandatory#main", "enemy init done") --feels like there should be a way to do this via Monarch
	
	print("enemy gui init done")
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("setup") then
		self.enemy = gd.enemies[message["level"]] --set enemy based on the level
		self.health = self.enemy.health
		gui.set_text(gui.get_node("enemy_health"), "Enemy health: "..self.health)
		self.move_options = gf.generate_enemy_move_nodes(self.enemy, self.move_positions)
	end

	if message_id == hash("select_move") then
		local player_move = message.player_move
		local random_choice = math.random(#self.move_options)
		local enemy_node_tree_selected = self.move_options[random_choice]
		local enemy_node_selected = enemy_node_tree_selected[hash("enemy_move")]

		--remove moves as selected
		table.remove(self.move_options, random_choice)
		gui.delete_node(enemy_node_selected)
		if next(self.move_options) == nil then
			self.move_options = gf.generate_enemy_move_nodes(self.enemy, self.move_positions)
		end
		
		local enemy_move = enemy_node_tree_selected["move_type"]
		print("Enemy selected: " .. enemy_move)

		local outcome = gf.determine_outcome(player_move, enemy_move)

		local enemy_item = self.enemy[enemy_move][outcome.enemy_result]
		
		msg.post(sender, "outcome", {["outcome"] = outcome.player_result, ["enemy_item"] = enemy_item})
		print("Enemy outcome: " .. outcome.enemy_result)
	end

	if message_id == hash("outcome_actions") then
		local player_item = message.player_item
		local enemy_item = message.enemy_item
		self.health = self.health - player_item.dmg + enemy_item.heal
		gui.set_text(gui.get_node("enemy_health"), "Enemy health: "..self.health)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
