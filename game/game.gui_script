local gd = require "game.game_data"
local gf = require "game.game_functions"
local monarch = require "monarch.monarch"


function init(self)
	msg.post(".", "acquire_input_focus")

	self.clear_results_timer = nil
	self.results_showing = false
	
	self.player_move_selected = nil
	self.player_items = {}
	
	self.enemy_move_selected = nil
	self.enemy_items = {}

	self.level = gd.player.current_level or 1 --get players current level

	msg.post("/enemy/enemy#enemy", "setup", {level = self.level})
	msg.post("/player/player#player", "send_items")
	--msg.post("/enemy/enemy#enemy", "send_items")
	--msg.post("main/main_menu#main_menu", "game_init_done") --feels like there should be a way to do this via Monarch
	print("game gui init done")
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
	print("GAME gui script final function done")
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("player_items") then
		self.player_items = message
	end

	if message_id == hash("enemy_setup_done") then
		msg.post(sender, "send_items")
	end
	
	if message_id == hash("enemy_items") then
		self.enemy_items = message
	end

	if message_id == hash("player_choice") then
		self.player_choice = message.player_move
	end

	if message_id == hash("enemy_choice") then
		self.enemy_choice = message.enemy_move

		local outcome = gf.determine_outcome(self.player_choice, self.enemy_choice)

		local player_result = outcome.player_result
		local enemy_result = outcome.enemy_result
		local player_item = self.player_items[self.player_choice][player_result]
		local enemy_item = self.enemy_items[self.enemy_choice][enemy_result]
		pprint(player_item.effect)
		
		local player_health_change = player_item.heal - enemy_item.dmg
		local player_effect_change = gf.get_effects("player", player_item.effect, enemy_item.effect)
		print("player effects from game gui")
		pprint(player_effect_change)
		local player_outcome_actions = {health_change = player_health_change, effect_change = player_effect_change}

		local enemy_health_change = enemy_item.heal - player_item.dmg
		local enemy_effect_change = gf.get_effects("enemy", player_item.effect, enemy_item.effect)
		print("enemy effects from game gui")
		pprint(enemy_effect_change)
		local enemy_outcome_actions = {health_change = enemy_health_change, effect_change = enemy_effect_change}

		msg.post("/player/player#player", "outcome_actions", player_outcome_actions)
		msg.post("/enemy/enemy#enemy", "outcome_actions", enemy_outcome_actions)

		local function set_result()
			local outcome_node = gui.get_node("outcome")
			gui.set_color(outcome_node, vmath.vector4(1, 1, 1, 1))
			gui.set_text(outcome_node, player_result)
			self.results_showing = true
		end

		--set the results and then start a timer to clear them if they aren't cleared by next touch first
		set_result()
		if self.clear_results_timer then timer.cancel(self.clear_results_timer) end
		self.clear_results_timer = timer.delay(3, false, gf.clear_previous_results)
	end

	if message_id == hash("clear_results") then
		gf.clear_previous_results(self)
	end

	if message_id == hash("player_health_0") then
		monarch.show(hash("loss_popup"))
		update_player_level("reset")
	end

	if message_id == hash("enemy_health_0") then
		monarch.show(hash("win_popup"))
		update_player_level("next")
	end
	
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
