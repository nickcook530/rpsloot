local gd = require "game.game_data"
local gf = require "game.game_functions"
--NEED TO SET PLAYER BASED ON CLASS CHOSEN



function init(self)
	msg.post(".", "acquire_input_focus")
	
	self.player = gd.player.current_class
	self.deck = gf.generate_deck(self.player)
	self.health = self.player.health
	self.effect_table = {} --table to hold effects that last multiple turns
	self.effect_nodes = {} --create table for clearing later
	
	gui.set_text(gui.get_node("player_health"), "Player hp: "..self.health)
	
	
	self.hand_positions = {vmath.vector3(105, 200, 0), vmath.vector3(320, 200, 0), vmath.vector3(535, 200, 0)}
	self.hand = gf.initial_hand("player", self.deck, self.hand_positions)
	gui.set_text(gui.get_node("player_deck"), "Deck: "..#self.deck.."/10")

	print("player gui init done")
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.released then
		for i=1, #self.hand do

			--Setting the entire tree to instance variable so it can manipulated (cleared) later
			self.player_node_tree_selected = self.hand[i]

			--get the exact node from tree to check for selection and animate
			local player_node_selected = self.player_node_tree_selected[hash("player_card")]

			if gui.pick_node(player_node_selected, action.x, action.y) then
				msg.post("/game/game#game", "clear_results") --clear previous results
								
				local card_selected = self.player_node_tree_selected.card_details --used to send to game gui to have all details
				print("You touched the: " .. card_selected.type)

				msg.post("/enemy/enemy#enemy", "select_card") --tell enemy to select card
				msg.post("/game/game#game", "player_choice", {card = card_selected}) --tell game gui what card you selected

				--move card to center
				gui.animate(player_node_selected, "position", vmath.vector3(320, 400, 0), gui.EASING_LINEAR, 1)

				--Using self.hand[2] to check because table.remove causes table entries to shift
				--At the time of this call the hand still believes it has the previous node (remove last to avoid shift)
				if next(self.deck) ~= nil and self.hand[2] ~= nil then
					local empty_hand_position = self.hand_positions[i]
					local new_deck_and_card = gf.draw_card(self.deck)
					gui.set_text(gui.get_node("player_deck"), "Deck: "..#self.deck.."/10")
					local new_card = new_deck_and_card.card
					self.deck = new_deck_and_card.deck
					self.hand[i] = gf.make_player_hand_node(new_card, empty_hand_position)
				elseif next(self.deck) == nil and self.hand[2] == nil then
					self.deck = gf.generate_deck(self.player)
					self.hand = gf.initial_hand("player", self.deck, self.hand_positions)
					gui.set_text(gui.get_node("player_deck"), "Deck: "..#self.deck.."/10")
				else
					table.remove(self.hand, i)
				end

				break
			end
		end
	end

	---no game function just used to test input
	if action_id == hash("space") then
		print("player gui spacebar")
	end
end

function final(self)
	-- Return input focus when the object is deleted
	--msg.post(".", "release_input_focus")
	print("PLAYER gui script final function done")
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("outcome_actions") then
		self.previous_node_selected = self.player_node_tree_selected[hash("player_card")] --set node to be cleared manually

		--update player health
		self.health = self.health + message.health_change

		--display numeric results color coded for gain (green) or loss (red)
		local combat_result_node = gui.get_node("combat_value")
		if tonumber(message.health_change) > 0 then
			gui.set_color(combat_result_node, vmath.vector4(0, 1, 0, 1))
			gui.set_text(combat_result_node, "+"..message.health_change.." hp")
		elseif tonumber(message.health_change) < 0 then
			gui.set_color(combat_result_node, vmath.vector4(1, 0, 0, 1))
			gui.set_text(combat_result_node, message.health_change.." hp")
		else
			gui.set_color(combat_result_node, vmath.vector4(1, 1, 1, 1))
			gui.set_text(combat_result_node, "+"..message.health_change.." hp")
		end

		--take action on effects currently on character
		local effect_outcome = gf.trigger_effects(self.health, self.effect_table)
		self.health = effect_outcome.health
		self.effect_table = effect_outcome.effect_table

		--update effect table with new effects
		self.effect_table = gf.add_new_effects(message.effect_change, self.effect_table)

		--print out net changes in health from affects
		local effect_result_node = gui.get_node("effect_value")
		if tonumber(effect_outcome.hp_change) > 0 then
			gui.set_color(effect_result_node, vmath.vector4(0, 1, 0, 1))
			gui.set_text(effect_result_node, "+"..effect_outcome.hp_change.." hp")
		elseif tonumber(effect_outcome.hp_change) < 0 then
			gui.set_color(effect_result_node, vmath.vector4(1, 0, 0, 1))
			gui.set_text(effect_result_node, effect_outcome.hp_change.." hp")
		else
			gui.set_color(effect_result_node, vmath.vector4(1, 1, 1, 1))
			gui.set_text(effect_result_node, "+"..effect_outcome.hp_change.." hp")
		end

		--clear previous effect nodes
		if next(self.effect_nodes) ~= nil then
			for i, node in pairs(self.effect_nodes) do
				gui.delete_node(node)
				table.remove(self.effect_nodes, i)
			end
		end

		--add an entry for each effect in the table
		local upper_effect_node = gui.get_node("continuous_value")
		for _, effect in pairs(self.effect_table) do
			local new_effect_node = gui.clone(upper_effect_node)
			table.insert(self.effect_nodes, new_effect_node)
			local upper_position_y = gui.get_position(upper_effect_node)
			gui.set_position(new_effect_node, upper_position_y-vmath.vector3(0, 20,0))

			if tonumber(effect.hp_change) > 0 then
				gui.set_color(new_effect_node, vmath.vector4(0, 1, 0, 1))
				gui.set_text(new_effect_node, effect.name..": +"..effect.hp_change.."hp for "..effect.duration.." turn(s)")
			elseif tonumber(effect.hp_change) < 0 then
				gui.set_color(new_effect_node, vmath.vector4(1, 0, 0, 1))
				gui.set_text(new_effect_node, effect.name..": "..effect.hp_change.."hp for "..effect.duration.." turn(s)")
			else
				gui.set_color(new_effect_node, vmath.vector4(1, 1, 1, 1))
				gui.set_text(new_effect_node, effect.name..": "..effect.hp_change.."hp for "..effect.duration.." turn(s)")
			end
			upper_effect_node = new_effect_node
		end

		--update visual to new player health
		gui.set_text(gui.get_node("player_health"), "Player hp: "..self.health)
		print("PLAYER hp: " ..self.health)

		--check to see if health is 0 (and player loses)
		if self.health <= 0 then
			msg.post("/game/game#game", "player_health_0")
		end
	end

	--clear previously selected card
	if message_id == hash("delete_previous_node") then
		gui.delete_node(self.previous_node_selected)
		self.previous_node_selected = nil
	end
	
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
