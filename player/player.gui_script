local gd = require "main.game_data"
local gf = require "main.game_functions"
--NEED TO SET PLAYER BASED ON CLASS CHOSEN

function init(self)
	msg.post(".", "acquire_input_focus")

	self.player = gd.player
	self.health = self.player.health
	gui.set_text(gui.get_node("player_health"), "Player health: "..self.health)
	self.move_positions = {vmath.vector3(100, 100, 0), vmath.vector3(322, 100, 0), vmath.vector3(540, 100, 0)}
	self.move_options = gf.generate_player_move_nodes(self.player, self.move_positions)
	print("player gui init done")
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.released then
		for i=1, #self.move_options do
			local selected_node_tree = self.move_options[i]
			local player_node_selected = selected_node_tree[hash("player_move")]
			if gui.pick_node(player_node_selected, action.x, action.y) then
				self.move_selected = selected_node_tree["move_type"] --used in outcome message
				print("You touched the: " .. selected_node_tree["move_type"])
				
				msg.post("level_1:/enemy/enemy#enemy", "select_move", {["player_move"] = self.move_selected})

				--remove moves as selected
				table.remove(self.move_options, i)
				gui.delete_node(player_node_selected)
				if next(self.move_options) == nil then
					self.move_options = gf.generate_player_move_nodes(self.player, self.move_positions)
				end
				break
			end
		end
	end
	
	if action_id == hash("space") then
		print("player gui spacebar")
	end
end

function final(self)
	-- Return input focus when the object is deleted
	--msg.post(".", "release_input_focus")
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("outcome") then
		print("Player outcome: "..message.outcome)

		local player_item = self.player[self.move_selected][message.outcome]
		local enemy_item = message.enemy_item
		msg.post(sender, "outcome_actions", {["player_item"] = player_item, ["enemy_item"] = enemy_item})
		
		self.health = self.health - enemy_item.dmg + player_item.heal
		gui.set_text(gui.get_node("player_health"), "Player health: "..self.health)
	end
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
